version: '3'

services:
    # backend:
    #     build:
    #         context: ./backend
    #         network: host
    #     restart: always
    #     volumes:
    #         - ./backend/app:/code/app
    #         - ./backend/logs:/logs
    #     ports:
    #         - '8888:8888'
    #     depends_on:
    #         db:
    #             condition: service_healthy
    #     networks:
    #         - postgres
    #     healthcheck:
    #         test: curl --fail http://localhost:8888 || exit 1
    #         interval: 10s
    #         retries: 5
    #         start_period: 20s
    #         timeout: 10s

    hotels:
        build:
            context: ./microservices/hotels
            network: host
        restart: always
        volumes:
            - ./microservices/hotels/app:/code/app
            - ./microservices/hotels/logs:/logs
        ports:
            - '8001:8000'
        depends_on:
            db:
                condition: service_healthy
        networks:
            - postgres
        healthcheck:
            test: curl --fail http://localhost:8001 || exit 1
            interval: 10s
            retries: 5
            start_period: 20s
            timeout: 10s

    prices:
        build:
            context: ./microservices/prices
            network: host
        restart: always
        volumes:
            - ./microservices/prices/app:/code/app
            - ./microservices/prices/logs:/logs
        ports:
            - '8002:8000'
        depends_on:
            db:
                condition: service_healthy
        networks:
            - postgres
        healthcheck:
            test: curl --fail http://localhost:8002 || exit 1
            interval: 10s
            retries: 5
            start_period: 20s
            timeout: 10s

    bookings:
        build:
            context: ./microservices/bookings
            network: host
        restart: always
        volumes:
            - ./microservices/bookings/app:/code/app
            - ./microservices/bookings/logs:/logs
        ports:
            - '8003:8000'
        depends_on:
            db:
                condition: service_healthy
        networks:
            - postgres
        healthcheck:
            test: curl --fail http://localhost:8003 || exit 1
            interval: 10s
            retries: 5
            start_period: 20s
            timeout: 10s
    
    nginx:
        image: nginx:latest
        ports:
            - "8080:8080"
        volumes:
            - ./nginx_config.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - hotels
            - prices
            - bookings

    db:
        image: postgres:alpine3.15
        environment:
            POSTGRES_USER: ${POSTGRES_USER:-postgres}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
            POSTGRES_DB: pgdb
            PGDATA: /data/postgres
        volumes:
            - postgres:/data/postgres
        ports:
            - '5432:5432'
        networks:
            - postgres
        restart: always
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U postgres']
            interval: 5s
            timeout: 5s
            retries: 5

    pgadmin:
        image: dpage/pgadmin4:6.4
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
            PGADMIN_CONFIG_SERVER_MODE: 'False'
        volumes:
            - pgadmin:/var/lib/pgadmin

        ports:
            - '${PGADMIN_PORT:-5050}:80'
        networks:
            - postgres
        restart: unless-stopped

networks:
    postgres:
        driver: bridge

volumes:
    postgres:
    pgadmin: